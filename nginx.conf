user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    sendfile on;
    keepalive_timeout 65;

    # -----------------------------------------------------------------
    # Upstream pools (stickiness with ip_hash)
    # -----------------------------------------------------------------
    upstream frontend_servers {
        ip_hash;
        server front:5173;
    }

    upstream backend_servers {
        ip_hash;
        server api:3000;
    }

    # -----------------------------------------------------------------
    # Internal HTTP entry‑point only.  No TLS/LE here – this container
    # lives *behind* Nginx‑Proxy‑Manager, which will terminate SSL on
    # ports 80/443 and forward traffic to this server on an *internal*
    # Docker network (e.g. to port 80 or 8081 depending on your
    # docker‑compose `ports:` mapping).
    # -----------------------------------------------------------------
    server {
        listen 80;
        server_name sdls.sdlswuret.systems;

        # Allow large uploads
        client_max_body_size 100M;

        # ---------------- Front‑end ----------------
        location / {
            proxy_pass http://frontend_servers;

            # WebSocket & HTTP/1.1 keep‑alive
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # ---------------- Back‑end REST/GraphQL ----------------
        location /api/ {
            proxy_pass http://backend_servers;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # ---------------- Socket.IO ----------------
        location /socket.io/ {
            proxy_pass http://backend_servers/socket.io/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }

        # ---------------- Additional proxy path ----------------
        location /proxy/api/ {
            proxy_pass http://backend_servers/proxy/api/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }
    }
}

